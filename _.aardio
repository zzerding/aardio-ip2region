//ip2region ip地理位置查询
class inet.ip2region {
    ctor(dbFilePath) {
        ip2regionEntry = ip2region_entry();
        datablockEmtry = datablock_entry();
        ip2rObj        =..raw.buffer( ip2regionEntry );
        if(!dbFilePath){
        	   dbFilePath     =..io.exist( "~/lib/inet/ip2region/ip2region.db" );
        }
        if(!dbFilePath){
        	error( "Error: not find db file", 2 );
        }
        if ( _dll.ip2region_create( ip2rObj, dbFilePath ) == 0 ) {
            error( "Error: Fail to create the ip2region object\n", 2 );
        };
        ..table.gc( this, this.destroy );
    };
    destroy = function() {
        _dll.ip2region_destroy( ip2rObj );
        ..raw.realloc( 0, ip2rObj );  //释放动态指针
    };
    search = function( ip, algorithm = 2 ) {  //0: memory 整个数据库全部载入内存 1: binary 基于二分查找 2: b-tree 基于btree算法 默认为2
    	//todo check ip;
    	if ( type( ip ) != type.string ) {
        	return null, "ip 错误";
    	};

    	datablock = ..raw.buffer( datablockEmtry );
    	var isState;
    	select( algorithm ) {
        	case 0 {
				isState = _dll.ip2region_memory_search_string(ip2rObj, ip ,datablock);
			};
			case 1 {
				isState = _dll.ip2region_binary_search_string(ip2rObj, ip ,datablock);
			};
			case 2{
				isState = _dll.ip2region_btree_search_string(ip2rObj, ip ,datablock);
			};
		};
		result = ..raw.convert(datablock,datablockEmtry);
		..raw.realloc(0,datablock);//释放动态指针
		if(isState){
			return result.region,null;
		}else{
			raw.realloc(0,datablock);
			return null,"转换失败";
		};
	};
};
namespace inet.ip2region{
    _dll            =..raw.loadDll( $"~/lib/inet/ip2region/ip2.dll",, "cdecl" );
    ip2region_entry = class {
        ptr HeaderSip;//header start ip blocks
        ptr Headerptr;//header ptr blocks
        int headerLen;//header block number
        ptr dbFile;//path of db file
        str dbHandler;//file handler
        str dbBinStr;//db binary string for memory search mode

        int firstIndexptr;//first index ptr
        int lastIndexptr;//last index ptr
        int totalBlocks;    //total index blocks number2regionEntry = ip2region_entry();
    };

    datablock_entry = class {
        int city_id;
        byte region[ 255 ];
    };

};

/**intellisense(inet)
ip2region() = ip地理位置查询 基于 https://github.com/lionsoul2014/ip2region aardio封装 !ip2region.
!ip2region.destroy = gc 
!ip2region.search(ip,algorithm) = 查找ip定位\n @1 ip 字符 @2 查找模式 数字 默认为2\n 0 memory 整个数据库全部载入内存\n 1 binary 基于二分查找\n 2: b-tree 基于btree算法 
end intellisense**/
